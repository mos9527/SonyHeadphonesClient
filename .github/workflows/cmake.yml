name: Build

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    strategy:
      matrix:
        os: ["ubuntu-24.04", "windows-latest", "macos-latest"]
        include:
          - os: ubuntu-24.04
            binary_path: Client/build/SonyHeadphonesClient
            artifact_name: "SonyHeadphonesClient-linux-x64"
            script: "sudo apt-get update && sudo apt-get install libbluetooth-dev libglew-dev libglfw3-dev libdbus-1-dev"
            gcc: 14
          - os: windows-latest
            binary_path: Client/build/Release/SonyHeadphonesClient.exe
            artifact_name: "SonyHeadphonesClient-win-x64.exe"
            script: ""            
          - os: macos-latest
            binary_path: Client/build/SonyHeadphonesClient.zip
            artifact_name: "SonyHeadphonesClient-macOS.zip"          
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Download Packages
      run: ${{ matrix.script }}

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/Client/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/Client/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/Client/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

    - name: Build
      working-directory: ${{github.workspace}}/Client/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
  
    - name: Zip the App Bundle (macOS)
      if: runner.os == 'macOS'
      working-directory: ${{github.workspace}}/Client/build
      # Zip the application for easier downloading
      run: zip -r SonyHeadphonesClient.zip SonyHeadphonesClient.app
  
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: ${{ matrix.artifact_name }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/${{matrix.binary_path}}
        # The desired behavior if no files are found using the provided path.

  release:
    if: "contains(github.event.head_commit.message, 'Version')"
    needs: ["build"]
    runs-on: ubuntu-latest

    steps:
    - name : Get Version
      id   : get_version
      run  : |        
        version=$(echo "${{ github.event.head_commit.message }}" | awk 'NR==1' | awk '{print $2}')
        echo "::set-output name=version::$version"

    - uses: actions/checkout@v3    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Version ${{ steps.get_version.outputs.version }}

    - uses: actions/download-artifact@v4
      with:
        path: ${{github.workspace}}/artifacts
        merge-multiple: true
  
    - name: Display structure of downloaded files
      run: ls -R ${{github.workspace}}/artifacts

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/artifacts/SonyHeadphonesClient
        asset_name: SonyHeadphonesClient-linux-x64
        asset_content_type: application/octet-stream

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/artifacts/SonyHeadphonesClient.exe
        asset_name: SonyHeadphonesClient-win-x64.exe
        asset_content_type: application/vnd.microsoft.portable-executable        

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/artifacts/SonyHeadphonesClient.zip
        asset_name: SonyHeadphonesClient-macOS.zip
        asset_content_type: application/zip

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
